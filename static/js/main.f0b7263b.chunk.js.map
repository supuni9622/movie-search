{"version":3,"sources":["components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","handleOnInputChange","e","query","target","value","console","warn","setState","handleOnInputSubmit","preventDefault","state","TVSeries","querylower","toLowerCase","queryfirst","RegExp","querylast","newquery","match","log","length","i","TVShows","shows","test","includes","push","indexOf","a","this","TVSeriesCount","className","id","Form","onSubmit","style","margin","InputGroup","FormControl","placeholder","aria-label","aria-describedby","type","onChange","Append","Button","variant","paddingLeft","paddingRight","class","fontWeight","map","TVShowName","Math","min","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0b7263b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TVShows from '../resources/data.json';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nimport '../css/search.css';\r\n\r\nclass Search extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // Declare states of query input and TVseries output result\r\n        this.state = {\r\n            query: '',\r\n            TVSeries : []\r\n        }\r\n    }\r\n\r\n    // When user type something in the search input, get the input value and keep it in the 'query' \r\n    handleOnInputChange = (e) => {\r\n        const query = e.target.value;\r\n        console.warn(query);\r\n        this.setState({query:query})\r\n    }\r\n\r\n    // After clicking search button search through the data file \r\n    handleOnInputSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {query} = this.state;\r\n        this.setState({query:query})\r\n        this.state.TVSeries = [];\r\n        // convert user input value to lowercase\r\n        const querylower = query.toLowerCase()\r\n        //Get whole user input as the first string using js regular expression anchors\r\n        const queryfirst = new RegExp(\"\\^\" + querylower );\r\n        //Get whole user input as the last string using js regular expression anchors\r\n        const querylast = new RegExp( querylower  + \"\\$\");\r\n        // Separate user input word by word\r\n        const separatewords = /\\b\\w+\\b/g;\r\n        const newquery = querylower.match(separatewords);\r\n        console.log(queryfirst);\r\n\r\n        //-------------------------Searching --------------------------------\r\n\r\n        //Check whether user input is empty or not\r\n        if(query.length >= 1){  \r\n            \r\n            //If user input is not empty then loop through TVshows array\r\n            for(let i=0; i<TVShows.shows.length; i++){\r\n                \r\n                // Search to find 3 tv shows; by getting user input as it is, at the beggining of the array elements (Beggining)\r\n                if(queryfirst.test(TVShows.shows[i].toLowerCase()) == true){\r\n                     // Check if the tv series already in the result\r\n                    if(!this.state.TVSeries.includes(TVShows.shows[i]) )\r\n                        this.state.TVSeries.push(TVShows.shows[i]);\r\n\r\n                        console.log(queryfirst.test(TVShows.shows[i].toLowerCase()))\r\n                        console.log(TVShows.shows[i])\r\n                    } \r\n                }\r\n            // If not find matching 3 tv shows \r\n            for(let i=0; i<TVShows.shows.length; i++){\r\n                \r\n                // Search to find tv shows; by getting user input as it is, among any place in the array element (Middle)\r\n                if(TVShows.shows[i].toLowerCase().indexOf(query.toLowerCase()) !== -1){\r\n                    // Check if the tv series already in the result\r\n                    if(!this.state.TVSeries.includes(TVShows.shows[i]))\r\n                         this.state.TVSeries.push(TVShows.shows[i]);\r\n                    }\r\n                }\r\n            \r\n            // If not find matching 3 tv shows yet\r\n            for(let i=0; i<TVShows.shows.length; i++){\r\n\r\n                // Search to find tv shows; by getting user input as it is, at the end of the array element (End)\r\n                if(querylast.test(TVShows.shows[i].toLowerCase()) == true){\r\n                     // Check if the tv series already in the result\r\n                    if(!this.state.TVSeries.includes(TVShows.shows[i]) )\r\n                        this.state.TVSeries.push(TVShows.shows[i]);\r\n\r\n                        console.log(queryfirst.test(TVShows.shows[i].toLowerCase()))\r\n                        console.log(TVShows.shows[i])\r\n                    } \r\n                }\r\n\r\n            // If not find matching 3 tv shows yet -- From here user input splited to separate strings \r\n            for(let i=0; i<TVShows.shows.length; i++){\r\n\r\n                // Check whether user input consists of only one word or more than one word\r\n                if(newquery.length == 1){\r\n                    if(TVShows.shows[i].toLowerCase().indexOf(querylower) !== -1){\r\n                        // Check if the tv series already in the result\r\n                        if(!this.state.TVSeries.includes(TVShows.shows[i]) )\r\n                            this.state.TVSeries.push(TVShows.shows[i]);\r\n                           }\r\n                }else if(newquery.length > 1 ){\r\n\r\n                    // If user input consists of more than one word get each separated word and search in the TV show array elements\r\n                    for(let a=0; a<=newquery.length; a++){ \r\n                        if(TVShows.shows[i].toLowerCase().indexOf(newquery[a]) !== -1){\r\n                            if(!this.state.TVSeries.includes(TVShows.shows[i]))\r\n                                this.state.TVSeries.push(TVShows.shows[i]);\r\n                        }\r\n                    }\r\n                         console.log(queryfirst.test(TVShows.shows[i].toLowerCase()))  \r\n                }  \r\n            }\r\n        }\r\n    }\r\n                       \r\n    render() {\r\n        const {query} = this.state;\r\n        const {TVSeries} = this.state;\r\n        var TVSeriesCount = TVSeries.length;\r\n        \r\n        return (\r\n            <>\r\n            <div className=\"jumbotron\">\r\n                <h1 id=\"title\">TV Series Search Engine</h1>\r\n                {/* Search Input */}\r\n                <Form onSubmit={this.handleOnInputSubmit} style={{margin: '0px 50px'}}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            placeholder=\"Search your favorite TV series...\"\r\n                            aria-label=\"TV series name\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            type=\"text\"\r\n                            value= {query}\r\n                            onChange = {this.handleOnInputChange}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button variant=\"outline-light\" type='submit' style={{paddingLeft:'30px', paddingRight:'30px'}}>\r\n                                <i class=\"fas fa-search\" style={{ fontWeight:'bold'}}/>\r\n                            </Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form>\r\n            </div>\r\n            {TVSeriesCount !== 0? \r\n                <div className=\"container\">\r\n                    {/* Display the results*/}\r\n                    {TVShows.shows.map((TVShowName) => {\r\n                        for(let i=0; i< Math.min(TVSeriesCount,3); i++){\r\n                            if(this.state.TVSeries[i] == TVShowName){\r\n                                return <h4 id=\"tv-show\">{TVShowName}</h4>\r\n                            }\r\n                        }\r\n                    })}\r\n                </div>\r\n            :\r\n                <div className=\"container\">\r\n                    <h6>Search and enjoy your favorite TV series.... </h6>\r\n                </div>\r\n            }\r\n            \r\n          </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n\r\n","import React from 'react';\nimport Search from './components/Search'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Search/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}